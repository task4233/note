(window.webpackJsonp=window.webpackJsonp||[]).push([[19],{307:function(t,a,v){"use strict";v.r(a);var e=v(12),r=Object(e.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"mc-lang-1-20190908"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#mc-lang-1-20190908"}},[t._v("#")]),t._v(" mc-lang 1 20190908")]),t._v(" "),a("ul",[a("li",[t._v("mc-lang全般に含まれているリソースまとめです。")]),t._v(" "),a("li",[t._v("https://github.com/task4233/mc-lang-1")])]),t._v(" "),a("h1",{attrs:{id:"追加した仕様"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#追加した仕様"}},[t._v("#")]),t._v(" 追加した仕様")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("#")]),t._v("でコメントアウト")]),t._v(" "),a("li",[t._v("カッコの実装")]),t._v(" "),a("li",[t._v("二項演算(+,-,*,/)の実yo")])]),t._v(" "),a("h1",{attrs:{id:"lexer-h"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#lexer-h"}},[t._v("#")]),t._v(" lexer.h")]),t._v(" "),a("ul",[a("li",[t._v("字句解析用ヘッダ")]),t._v(" "),a("li",[t._v("このセクションでは、Lexerというテキストから「数字」や「演算子」をまとまり毎に分割するクラスを実装している。")]),t._v(" "),a("li",[t._v("全体的な流れとしては、gettokをParserから呼ぶことにより「次のトークン」を読み、それが数値リテラルだった場合はnumValという変数にセットする。")])]),t._v(" "),a("h2",{attrs:{id:"variables"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#variables"}},[t._v("#")]),t._v(" variables")]),t._v(" "),a("ul",[a("li",[t._v("Token\n"),a("ul",[a("li",[t._v("構造体")])])])]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",{staticStyle:{"text-align":"center"}},[t._v("名称")]),t._v(" "),a("th",{staticStyle:{"text-align":"center"}},[t._v("詳細")])])]),t._v(" "),a("tbody",[a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("tok_eof")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("EOFトークン(-1)")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("tok_number")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("値を格納")])])])]),t._v(" "),a("h2",{attrs:{id:"functions"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#functions"}},[t._v("#")]),t._v(" functions")]),t._v(" "),a("ul",[a("li",[t._v("getIdentifier()\n"),a("ul",[a("li",[t._v("getter")])])])]),t._v(" "),a("h2",{attrs:{id:"class"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#class"}},[t._v("#")]),t._v(" class")]),t._v(" "),a("h3",{attrs:{id:"lexer"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#lexer"}},[t._v("#")]),t._v(" Lexer")]),t._v(" "),a("h4",{attrs:{id:"public"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#public"}},[t._v("#")]),t._v(" Public")]),t._v(" "),a("ul",[a("li",[t._v("gettok()メソッド\n"),a("ul",[a("li",[t._v("トークンを取得する")]),t._v(" "),a("li",[t._v("#やスペース等をスルーする")])])]),t._v(" "),a("li",[t._v("getNumVal\n"),a("ul",[a("li",[t._v("numValのゲッター")])])]),t._v(" "),a("li",[t._v("setNumVal\n"),a("ul",[a("li",[t._v("numValのセッター")])])]),t._v(" "),a("li",[t._v("initStream\n"),a("ul",[a("li",[t._v("fileNameのファイルをopen")])])])]),t._v(" "),a("h4",{attrs:{id:"private"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#private"}},[t._v("#")]),t._v(" Private")]),t._v(" "),a("ul",[a("li",[t._v("iFile\n"),a("ul",[a("li",[t._v("std::ifstream")])])]),t._v(" "),a("li",[t._v("numVal\n"),a("ul",[a("li",[t._v("保持する数字")])])]),t._v(" "),a("li",[t._v("getNextChar\n"),a("ul",[a("li",[t._v("1文字char型で入力")])])])]),t._v(" "),a("h1",{attrs:{id:"parser-h"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parser-h"}},[t._v("#")]),t._v(" parser.h")]),t._v(" "),a("ul",[a("li",[t._v("構文解析用ヘッダ")]),t._v(" "),a("li",[t._v("ここのセクションでは、AST（構文解析木）の葉を定義している。")]),t._v(" "),a("li",[t._v("MCコンパイラの根幹であるクラスでLexerとCodeGenで使われている。")]),t._v(" "),a("li",[t._v("Lexerが次のトークンを取ってきて、それが数値リテラルであったらNumberASTに値を格納し、そのポインタを親ノードが保持する。")]),t._v(" "),a("li",[t._v("全てのコードを無事にASTとして表現できたら、後述するcodegenを再帰的に呼び出す事によりオブジェクトファイルを生成する。")])]),t._v(" "),a("h2",{attrs:{id:"variables-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#variables-2"}},[t._v("#")]),t._v(" variables")]),t._v(" "),a("ul",[a("li",[t._v("curTok\n"),a("ul",[a("li",[t._v("読み取ったトークンを保持")])])]),t._v(" "),a("li",[t._v("getNextToken\n"),a("ul",[a("li",[t._v("lexer.hのgettok()")])])]),t._v(" "),a("li",[t._v("BinopPrecedence\n"),a("ul",[a("li",[t._v("mc.cppで定義した結合子の優先権を保持")])])])]),t._v(" "),a("h2",{attrs:{id:"functions-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#functions-2"}},[t._v("#")]),t._v(" functions")]),t._v(" "),a("ul",[a("li",[t._v("GetTokPrecedence()\n"),a("ul",[a("li",[t._v("二項演算子の結合度を取得")]),t._v(" "),a("li",[t._v("もし現在のトークンが二項演算子ならその結合度を返し、そうでないなら-1を返す。")])])]),t._v(" "),a("li",[t._v("LogError(const char *str)\n"),a("ul",[a("li",[t._v("エラーを表示しnullptrを返してくれるエラーハンドリング関数")])])]),t._v(" "),a("li",[t._v("ParseExpressions()\n"),a("ul",[a("li",[t._v("数値リテラル/カッコ->二項演算子の順にパースできるかを確認してパースする")])])]),t._v(" "),a("li",[t._v("ParseNumberExpr()\n"),a("ul",[a("li",[t._v("数値リテラルをパースして内部のexpressionのゆにぽを返す関数")])])]),t._v(" "),a("li",[t._v("ParseParenExpr\n"),a("ul",[a("li",[t._v("カッコ内部のexpressionをパースして内部のexpressionのゆにぽを返す関数")])])]),t._v(" "),a("li",[t._v("ParsePrimary()\n"),a("ul",[a("li",[t._v("NumberASTかカッコをパースするための関数を呼び出す関数")])])]),t._v(" "),a("li",[t._v("ParseBinOpRHS(int CallerPrec, std::unique_ptr<ExprAST> LHS)\n"),a("ul",[a("li",[t._v("二項演算子をパースする関数")]),t._v(" "),a("li",[t._v("LHSが入った状態でよびだされ, LHSとRHSと二項演算子がペアになった状態で返す")])])]),t._v(" "),a("li",[t._v("ParseTopLevelExpr()\n"),a("ul",[a("li",[t._v("パーサーのトップレベル関数")]),t._v(" "),a("li",[t._v("まだ関数定義は実装しないので、今のmc言語では__anon_exprという関数がトップレベルに作られ、その中に全てのASTが入る")])])])]),t._v(" "),a("h2",{attrs:{id:"class-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#class-2"}},[t._v("#")]),t._v(" class")]),t._v(" "),a("h3",{attrs:{id:"exprast"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#exprast"}},[t._v("#")]),t._v(" ExprAST")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("5+2")]),t._v("や"),a("code",[t._v("2*10-2")]),t._v("等のexpressionを表すクラス")])]),t._v(" "),a("h3",{attrs:{id:"numberast"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#numberast"}},[t._v("#")]),t._v(" NumberAST")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("5")]),t._v("や"),a("code",[t._v("2")]),t._v("等の数値リテラルを表すクラス")])]),t._v(" "),a("h4",{attrs:{id:"public-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#public-2"}},[t._v("#")]),t._v(" public")]),t._v(" "),a("ul",[a("li",[t._v("*codegenをオーバーライド")])]),t._v(" "),a("h4",{attrs:{id:"private-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#private-2"}},[t._v("#")]),t._v(" private")]),t._v(" "),a("ul",[a("li",[t._v("Val\n"),a("ul",[a("li",[t._v("数値の値を保持する変数")])])])]),t._v(" "),a("h3",{attrs:{id:"binaryast"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#binaryast"}},[t._v("#")]),t._v(" BinaryAST")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("+")]),t._v("や"),a("code",[t._v("*")]),t._v("等の二項演算子を表すクラス")])]),t._v(" "),a("h4",{attrs:{id:"public-3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#public-3"}},[t._v("#")]),t._v(" public")]),t._v(" "),a("ul",[a("li",[t._v("*codegenをオーバーライド")])]),t._v(" "),a("h4",{attrs:{id:"private-3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#private-3"}},[t._v("#")]),t._v(" private")]),t._v(" "),a("ul",[a("li",[t._v("Op\n"),a("ul",[a("li",[t._v("char型のオペランド?")])])]),t._v(" "),a("li",[t._v("LHS(Left-hand side)/RHS(Right-hand side)\n"),a("ul",[a("li",[t._v("左辺値/右辺値を指すゆにぽ")])])])]),t._v(" "),a("h3",{attrs:{id:"prototypeast"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#prototypeast"}},[t._v("#")]),t._v(" PrototypeAST")]),t._v(" "),a("ul",[a("li",[t._v("関数シグネチャーで、関数の名前と引数の名前を表すクラス")])]),t._v(" "),a("h4",{attrs:{id:"public-4"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#public-4"}},[t._v("#")]),t._v(" public")]),t._v(" "),a("ul",[a("li",[t._v("&getName()\n"),a("ul",[a("li",[t._v("保持しているNameのアドレスを返す")])])])]),t._v(" "),a("h4",{attrs:{id:"private-4"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#private-4"}},[t._v("#")]),t._v(" private")]),t._v(" "),a("ul",[a("li",[t._v("Name\n"),a("ul",[a("li",[t._v("関数名")]),t._v(" "),a("li",[t._v("std::string")])])]),t._v(" "),a("li",[t._v("Args\n"),a("ul",[a("li",[t._v("引数")]),t._v(" "),a("li",[t._v("std::vector<std::string>")])])])]),t._v(" "),a("h3",{attrs:{id:"functionast"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#functionast"}},[t._v("#")]),t._v(" FunctionAST")]),t._v(" "),a("ul",[a("li",[t._v("関数のbody(C++で言うint foo) {...}の中身)を表すクラス")])]),t._v(" "),a("h4",{attrs:{id:"public-5"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#public-5"}},[t._v("#")]),t._v(" public")]),t._v(" "),a("ul",[a("li",[t._v("*codegen()")])]),t._v(" "),a("h4",{attrs:{id:"private-5"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#private-5"}},[t._v("#")]),t._v(" private")]),t._v(" "),a("ul",[a("li",[t._v("Proto\n"),a("ul",[a("li",[t._v("関数の名前と引数を保持するオブジェクトのゆにぽ")]),t._v(" "),a("li",[t._v("std::unique_ptr<PrototypeAST>")])])]),t._v(" "),a("li",[t._v("Body\n"),a("ul",[a("li",[t._v("関数の中身のexpressionを保持するオブジェクトのゆにぽ")]),t._v(" "),a("li",[t._v("std::unique_ptr<ExprAST>")])])])])])}),[],!1,null,null,null);a.default=r.exports}}]);